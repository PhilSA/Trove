
using Trove.PolymorphicElements;
using Unity.Burst;
using Unity.Entities;
using Unity.Jobs;

[BurstCompile]
public partial struct #SCRIPTNAME# : ISystem
{
    public struct Singleton : IComponentData
    {
        public EventStreamManager EventStreamManager;
    }

    // Store collections in the system
    private EventStreamManager _eventStreamManager;

    [BurstCompile]
    void OnCreate(ref SystemState state)
    {
        // Create events manager in the system (allocates native collections)
        _eventStreamManager = new EventStreamManager(ref state);

        // Create singleton containing events manager
        Entity singletonEntity = state.EntityManager.CreateEntity();
        state.EntityManager.AddComponentData(singletonEntity, new Singleton
        {
            EventStreamManager = _eventStreamManager,
        });
    }

    [BurstCompile]
    void OnDestroy(ref SystemState state)
    {
        // Dispose events manager
        _eventStreamManager.Dispose();
    }

    [BurstCompile]
    void OnUpdate(ref SystemState state)
    {
        // Iterate event stream readers and schedule a job to process each one
        ref EventStreamManager eventStreamManager = ref SystemAPI.GetSingletonRW<Singleton>().ValueRW.EventStreamManager;
        eventStreamManager.BeginEventStreamReaderIteration();
        while (eventStreamManager.NextEventStreamReader(out EventStream.Reader streamReader))
        {
            ExecuteEventsJob job = new ExecuteEventsJob
            {
                EventStreamReader = streamReader,
            };
            state.Dependency = job.Schedule(state.Dependency);
        }

        // Dispose streams & clear
        state.Dependency = eventStreamManager.DisposeAndClearEventStreams(state.Dependency);
    }

    [BurstCompile]
    public partial struct ExecuteEventsJob : IJob
    {
        public EventStream.Reader EventStreamReader;

        public void Execute()
        {
            // Iterate stream buffers
            for (int i = 0; i < EventStreamReader.ForEachCount; i++)
            {
                EventStreamReader.BeginForEachIndex(i);

                // Iterate events in stream readers
                // HERE

                EventStreamReader.EndForEachIndex();
            }
        }
    }
}