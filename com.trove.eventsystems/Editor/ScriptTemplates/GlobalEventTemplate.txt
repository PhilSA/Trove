
using Trove.EventSystems;
using Unity.Burst;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using UnityEngine;

// See all TODO comments for things you are expected to modify.

// Register generic job types
[assembly: RegisterGenericJobType(typeof(EventClearListJob<#SCRIPTNAME#>))]
[assembly: RegisterGenericJobType(typeof(EventTransferQueueToListJob<#SCRIPTNAME#>))]
[assembly: RegisterGenericJobType(typeof(EventTransferStreamToListJob<#SCRIPTNAME#>))]

/// <summary>
/// This is the singleton containing a manager for this event type.
/// It is automatically created by the event system for this event type. 
/// Event writers access the event manager in this singleton in order to get queues/streams to write events in.
/// Event readers access the event manager in this singleton in order to get a list of events to read.
/// </summary>
public struct #SCRIPTNAME#sSingleton : IComponentData, IGlobalEventsSingleton<#SCRIPTNAME#>
{
    public QueueEventsManager<#SCRIPTNAME#> QueueEventsManager { get; set; }
    public GlobalStreamEventsManager<#SCRIPTNAME#> StreamEventsManager { get; set; }
    public NativeList<#SCRIPTNAME#> ReadEventsList { get; set; }
}

/// <summary>
/// This is the event struct
/// </summary>
public struct #SCRIPTNAME#
{
    // TODO: Define event data
    public int Val;
}

/// <summary>
/// This is the event system that transfers events from the queues/streams to the global events list.
/// It also clears the events list before adding to it, meaning events from the previous frame are still valid
/// until this system updates.
/// All event writer systems should update before this system, and all event reader systems should update after this system.
/// TODO: You can change the update order of this system.
/// </summary>
partial struct #SCRIPTNAME#System : ISystem
{
    private GlobalEventSubSystem<#SCRIPTNAME#sSingleton, #SCRIPTNAME#> _subSystem;

    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
        _subSystem =
            new GlobalEventSubSystem<#SCRIPTNAME#sSingleton, #SCRIPTNAME#>(
                ref state, 32, 32, 1000); // TODO: tweak initial capacities
    }

    [BurstCompile]
    public void OnDestroy(ref SystemState state)
    {
        _subSystem.OnDestroy(ref state);
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        _subSystem.OnUpdate(ref state);

        // TODO: you could choose to execute events here after the event subsystem update, if you want (see Example#SCRIPTNAME#ReaderSystem for how to read/execute events)
    }
}

/// <summary>
/// Example of an events writer system.
/// TODO: Delete or change or move elsewhere.
/// </summary>
[UpdateBefore(typeof(#SCRIPTNAME#System))]
partial struct Example#SCRIPTNAME#WriterSystem : ISystem
{
    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
        state.RequireForUpdate<#SCRIPTNAME#sSingleton>();
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        // Get the events singleton for this event type
        #SCRIPTNAME#sSingleton eventsSingleton = SystemAPI.GetSingletonRW<#SCRIPTNAME#sSingleton>().ValueRW;
        
        // Schedule a job writing to an events queue.
        state.Dependency = new #SCRIPTNAME#QueueWriterJob
        {
            EventsQueue  = eventsSingleton.QueueEventsManager.CreateWriter(),
        }.Schedule(state.Dependency);
        
        // Schedule a job writing to an events stream.
        state.Dependency = new #SCRIPTNAME#StreamWriterJob
        {
            EventsStream  = eventsSingleton.StreamEventsManager.CreateWriter(1),
        }.Schedule(state.Dependency);
    }

    [BurstCompile]
    public struct #SCRIPTNAME#QueueWriterJob : IJob
    {
        public NativeQueue<#SCRIPTNAME#> EventsQueue;
        
        public void Execute()
        {
            // Write an example event
            EventsQueue.Enqueue(new #SCRIPTNAME# { Val = 1 });
        }
    }

    [BurstCompile]
    public struct #SCRIPTNAME#StreamWriterJob : IJob
    {
        public GlobalStreamEventsManager<#SCRIPTNAME#>.Writer EventsStream;
        
        public void Execute()
        {
            // When writing to a stream, we must begin/end foreach index
            EventsStream.BeginForEachIndex(0);
            
            // Write an example event
            EventsStream.Write(new #SCRIPTNAME# { Val = 1 });

            EventsStream.EndForEachIndex();
        }
    }
}

/// <summary>
/// Example of an events reader system.
/// TODO: Delete or change or move elsewhere.
/// </summary>
[UpdateAfter(typeof(#SCRIPTNAME#System))]
partial struct Example#SCRIPTNAME#ReaderSystem : ISystem
{
    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
        state.RequireForUpdate<#SCRIPTNAME#sSingleton>();
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        // Get the events singleton for this event type
        #SCRIPTNAME#sSingleton eventsSingleton = SystemAPI.GetSingletonRW<#SCRIPTNAME#sSingleton>().ValueRW;
        
        // Schedule a job with the ReadEventsList gotten from the singleton
        state.Dependency = new #SCRIPTNAME#ReaderJob
        {
            ReadEventsList  = eventsSingleton.ReadEventsList,
        }.Schedule(state.Dependency);
    }

    [BurstCompile]
    public struct #SCRIPTNAME#ReaderJob : IJob
    {
        [ReadOnly]
        public NativeList<#SCRIPTNAME#> ReadEventsList;
        
        public void Execute()
        {
            // Read events
            for (int i = 0; i < ReadEventsList.Length; i++)
            {
                // Debug.Log($"Read #SCRIPTNAME# with value: {ReadEventsList[i].Val}");
            }
        }
    }
}