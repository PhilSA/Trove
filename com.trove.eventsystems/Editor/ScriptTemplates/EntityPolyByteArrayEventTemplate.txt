
using System.Runtime.CompilerServices;
using Trove;
using Trove.EventSystems;
using Unity.Burst;
using Unity.Collections;
using Unity.Entities;
using Unity.Jobs;
using Trove.PolymorphicStructs;

// See all TODO comments for things you are expected to modify.

// Register generic job types
[assembly: RegisterGenericJobType(typeof(EventClearBuffersJob<#SCRIPTNAME#BufferElement, Has#SCRIPTNAME#s>))]
[assembly: RegisterGenericJobType(typeof(EventTransferPolyByteArrayStreamToBufferJob<#SCRIPTNAME#BufferElement, Has#SCRIPTNAME#s, #SCRIPTNAME#ForEntity, Poly#SCRIPTNAME#>))]

/// <summary>
/// This is the singleton containing a manager for this event type.
/// It is automatically created by the event system for this event type.
/// Event writers access the event manager in this singleton in order to get streams to write events in.
/// </summary>
public struct #SCRIPTNAME#sSingleton : IComponentData, IEntityPolyByteArrayEventsSingleton<#SCRIPTNAME#ForEntity, Poly#SCRIPTNAME#>
{
    public EntityPolyByteArrayStreamEventsManager<#SCRIPTNAME#ForEntity, Poly#SCRIPTNAME#> StreamEventsManager { get; set; }
}

/// <summary>
/// This is the event struct that is written by event writers.
/// It contains an "AffectedEntity" field to determine on which Entity the event will be transfered.
/// "Event" represents what actually gets serialized to the entity's dynamic buffer.
/// </summary>
public struct #SCRIPTNAME#ForEntity : IPolyByteArrayEventForEntity<Poly#SCRIPTNAME#>
{
    public Entity AffectedEntity { get; set; }
    public Poly#SCRIPTNAME# Event { get; set; }
}

/// <summary>
/// Polymorphic interface used for generating our event polymorphic struct. 
///
/// This will generate a new polymorphic struct named Poly#SCRIPTNAME# that can act as any event type implementing
/// this interface and using the [PolymorphicStruct] attribute.
///
/// You can add parameters and return types to the Execute function, or even add new functions. "Execute()" is only
/// a suggestion.
/// </summary>
[PolymorphicStructInterface]
public interface I#SCRIPTNAME#
{
    public void Execute();
}

/// <summary>
/// This is an example polymorphic event type. You can create more of these containing different data.
/// </summary>
[PolymorphicStruct]
public struct #SCRIPTNAME#A : I#SCRIPTNAME#
{
    // TODO: Define event data
    public int Val;
    
    public void Execute()
    {
        // TODO: implement event execution
    }
}

/// <summary>
/// This is an example polymorphic event type. You can create more of these containing different data.
/// </summary>
[PolymorphicStruct]
public struct #SCRIPTNAME#B : I#SCRIPTNAME#
{
    // TODO: Define event data
    public int Val1;
    public int Val2;
    public int Val3;
    
    public void Execute()
    {
        // TODO: implement event execution
    }
}

// TODO: Define more polymorphic event structs

/// <summary>
/// This is a DynamicBuffer of bytes that acts as a generic pool of memory on entities, where to store polymorphic events.
/// You must ensure this buffer is added to entities that can receive this type of event.
/// IMPORTANT: You must not add any more data to this struct. It needs to remain a single byte.
/// </summary>
[InternalBufferCapacity(0)] // TODO: adjust internal capacity
public struct #SCRIPTNAME#BufferElement : IBufferElementData
{
    public byte Element;
}

/// <summary>
/// This is an enableable component that flags entities that currently have events to process.
/// You must ensure this component is added to entities that can receive this type of event.
/// </summary>
public struct Has#SCRIPTNAME#s : IComponentData, IEnableableComponent
{ }


/// <summary>
/// This is the event system that transfers events from the streams to their destination entity buffers.
/// It also clears all event buffers before adding to them, meaning events from the previous frame are still valid
/// until this system updates.
/// All event writer systems should update before this system, and all event reader systems should update after this system.
/// TODO: You can change the update order of this system.
/// </summary>
partial struct #SCRIPTNAME#System : ISystem
{
    private EntityPolyByteArrayEventSubSystem<#SCRIPTNAME#sSingleton, #SCRIPTNAME#BufferElement, Has#SCRIPTNAME#s, #SCRIPTNAME#ForEntity, Poly#SCRIPTNAME#> _subSystem;

    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
        _subSystem =
            new EntityPolyByteArrayEventSubSystem<#SCRIPTNAME#sSingleton, #SCRIPTNAME#BufferElement, Has#SCRIPTNAME#s, #SCRIPTNAME#ForEntity, Poly#SCRIPTNAME#>(
                ref state, 32); // TODO: tweak initial capacities
    }

    [BurstCompile]
    public void OnDestroy(ref SystemState state)
    {
        _subSystem.OnDestroy(ref state);
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        _subSystem.OnUpdate(ref state);

        // TODO: you could choose to execute events here after the event subsystem update, if you want (see Example#SCRIPTNAME#ReaderSystem for how to read/execute events)
    }
}

/// <summary>
/// Example of an events writer system.
/// TODO: Delete or change or move elsewhere.
/// </summary>
[UpdateBefore(typeof(#SCRIPTNAME#System))]
partial struct Example#SCRIPTNAME#WriterSystem : ISystem
{
    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
        state.RequireForUpdate<#SCRIPTNAME#sSingleton>();
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        // Get the events singleton for this event type
        #SCRIPTNAME#sSingleton eventsSingleton = SystemAPI.GetSingletonRW<#SCRIPTNAME#sSingleton>().ValueRW;
        
        // Schedule a job writing to an events stream.
        state.Dependency = new #SCRIPTNAME#WriterJob
        {
            EventsStream  = eventsSingleton.StreamEventsManager.CreateWriter(1),
        }.Schedule(state.Dependency);
    }

    [BurstCompile]
    public struct #SCRIPTNAME#WriterJob : IJob
    {
        public EntityPolyByteArrayStreamEventsManager<#SCRIPTNAME#ForEntity, Poly#SCRIPTNAME#>.Writer EventsStream;
        
        public void Execute()
        {
            // When writing to a stream, we must begin/end foreach index
            EventsStream.BeginForEachIndex(0);
            
            // Write an example event A
            EventsStream.Write(new #SCRIPTNAME#ForEntity
            {
                // AffectedEntity = someEntity, // TODO: Find some valid entity with a DynamicBuffer<#SCRIPTNAME#> to target
                Event = new #SCRIPTNAME#A { Val = 1 },
            });
            // Write an example event B
            EventsStream.Write(new #SCRIPTNAME#ForEntity
            {
                // AffectedEntity = someEntity, // TODO: Find some valid entity with a DynamicBuffer<#SCRIPTNAME#> to target
                Event = new #SCRIPTNAME#B { Val1 = 3, Val2 = 5, Val3 = 11 },
            });
            
            EventsStream.EndForEachIndex();
        }
    }
}

/// <summary>
/// Example of an events reader system.
/// TODO: Delete or change or move elsewhere.
/// </summary>
[UpdateAfter(typeof(#SCRIPTNAME#System))]
partial struct Example#SCRIPTNAME#ReaderSystem : ISystem
{
    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        // Schedule a job iterating entities with a DynamicBuffer<#SCRIPTNAME#> to read events
        state.Dependency = new #SCRIPTNAME#ReaderJob
        {
        }.Schedule(state.Dependency);
    }

    [BurstCompile]
    [WithAll(typeof(Has#SCRIPTNAME#s))] // This ensures we only iterate entities that have received events
    public partial struct #SCRIPTNAME#ReaderJob : IJobEntity
    {
        public void Execute(DynamicBuffer<#SCRIPTNAME#BufferElement> eventsBuffer)
        {
            DynamicBuffer<byte> eventsBytesBuffer = eventsBuffer.Reinterpret<byte>();
            
            // Get the iterator that can read through the polymorphic structs of the list
            PolymorphicObjectDynamicBufferIterator<Poly#SCRIPTNAME#> iterator = 
                PolymorphicObjectUtilities.GetIterator<Poly#SCRIPTNAME#>(eventsBytesBuffer);
            while (iterator.GetNext(out Poly#SCRIPTNAME# e, out _, out _))
            {
                // Execute the event (execution logic is implemented in the event struct itself)
                e.Execute();
            }
        }
    }
}