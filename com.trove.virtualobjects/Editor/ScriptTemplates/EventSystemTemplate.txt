using Unity.Burst;
using Unity.Entities;
using Unity.Jobs;
using Unity.Mathematics;
using Trove.PolymorphicElements;
using System;
using Unity.Collections.LowLevel.Unsafe;

[BurstCompile]
[UpdateInGroup(typeof(SimulationSystemGroup))]
public partial struct #SCRIPTNAME# : ISystem
{
    public struct Singleton : IComponentData
    {
        public EventBuffersManager EventBuffersManager;
    }

    private EventBuffersManagerData _eventBuffersManagerData;

    [BurstCompile]
    public void OnCreate(ref SystemState state)
    {
        state.RequireForUpdate<Singleton>();
        _eventBuffersManagerData = new EventBuffersManagerData(ref state);
        state.EntityManager.AddComponentData(state.EntityManager.CreateEntity(), new Singleton { EventBuffersManager = new EventBuffersManager(ref _eventBuffersManagerData) });
    }

    [BurstCompile]
    public void OnDestroy(ref SystemState state)
    {
        _eventBuffersManagerData.DisposeAll();
    }

    [BurstCompile]
    public void OnUpdate(ref SystemState state)
    {
        _eventBuffersManagerData.BeforeEventsProcessed(ref state);

        ExecuteEventsJob job = new ExecuteEventsJob
        {
            EventBuffersManagerData = _eventBuffersManagerData,
        };
        state.Dependency = job.Schedule(state.Dependency);

        _eventBuffersManagerData.AfterEventsProcessed(ref state);
    }

    [BurstCompile]
    public struct ExecuteEventsJob : IJob
    {
        public EventBuffersManagerData EventBuffersManagerData;

        public void Execute()
        {
            EventBuffersManagerData.BeginReadEvents();

            while (EventBuffersManagerData.NextEventsList(out UnsafeList<byte> eventsList))
            {
                // TODO: Execute events list
            }

            while (EventBuffersManagerData.NextEventsStreamReader(out UnsafeStream.Reader eventsStreamReader))
            {
                for (int j = 0; j < eventsStreamReader.ForEachCount; j++)
                {
                    eventsStreamReader.BeginForEachIndex(j);

                    //  TODO: Execute events stream

                    eventsStreamReader.EndForEachIndex();
                }
            }
        }
    }
}